@page "/register"
@inject Blog_BrazorWebApp.Data.ApplicationDbContext DB
@using Blog_BrazorWebApp.Model
@inject NavigationManager NavigationManager
@using System.Security.Claims;

<PageTitle>新規登録</PageTitle>

<h1>新規ユーザー登録</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="UserAccount" OnValidSubmit="AddUserAccount" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="username" class="form-label">UserName:</label> 
                <InputText id="username" @bind-Value="UserAccount.UserName" class="form-control" />
            </div>        
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label> 
                <InputText id="password" @bind-Value="UserAccount.Password" class="form-control" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password(confirm):</label>
                <Input id="password" class="form-control" />
            </div>
            @if (RoleName == "administrator")
            {
                <div class="mb-3">
                    <label for="roleName" class="form-label">RoleName:</label>
                    <select id="roleName" class="form-control" @bind="SelectedRole">
                        @foreach (var role in UserRoles)
                        {
                            <option value="@role.RoleName">@role.RoleName</option>
                        }
                    </select>
                </div>
            }

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/useraccounts">Back to List</a>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public UserAccount UserAccount { get; set; } = new();

    private List<UserRole> UserRoles;
    private int RoleId;
    private string RoleName;
    private string SelectedRole { get; set; }

    protected override void OnInitialized()
    {
        // ログインしていない場合は何もしない
        if (HttpContext.User.Identity.IsAuthenticated)
        {
            // ユーザーのロールを取得
            var user = HttpContext.User;
            if (user != null)
            {
                RoleName = user.FindFirstValue(ClaimTypes.Role);
            }

            // UserRole テーブルからすべてのロールを取得
            UserRoles = DB.UserRoles.ToList();

        }
    }

    public async Task AddUserAccount()
    {
        // ユーザー名の重複チェック
        if (DB.UserAccounts.Any(u => u.UserName == UserAccount.UserName))
        {
            return;
        }

        if (SelectedRole != null)
        {
            RoleName = SelectedRole;
        }
        else
        {
            RoleName = "user";
        }

        RoleId = DB.UserAccounts.FirstOrDefault(u => u.UserRole.RoleName == RoleName).RoleId;
        UserAccount.RoleId = RoleId;

        DB.UserAccounts.Add(UserAccount);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/login");

    }
}