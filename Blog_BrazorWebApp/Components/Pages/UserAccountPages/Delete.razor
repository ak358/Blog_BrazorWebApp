@page "/useraccounts/delete"
@inject Blog_BrazorWebApp.Data.ApplicationDbContext DB
@using Blog_BrazorWebApp.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>UserAccount</h4>
    <hr />
    @if (useraccount is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">UserName</dt>
            <dd class="col-sm-10">@useraccount.UserName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@useraccount.Password</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RoleId</dt>
            <dd class="col-sm-10">@useraccount.RoleId</dd>
        </dl>
        <EditForm method="post" Model="useraccount" OnValidSubmit="DeleteUserAccount" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(useraccount is null)">Delete</button> |
            <a href="/useraccounts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    UserAccount? useraccount;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        useraccount = await DB.UserAccounts.FirstOrDefaultAsync(m => m.Id == Id);

        if (useraccount is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteUserAccount()
    {
        DB.UserAccounts.Remove(useraccount!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/useraccounts");
    }
}
