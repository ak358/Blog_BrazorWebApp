@page "/articles/details"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject Blog_BrazorWebApp.Data.ApplicationDbContext DB
@inject IJSRuntime JSRuntime

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Article</h4>
    <hr />
    @if (article is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@article.Title</dd>

            <dt class="col-sm-2">Content</dt>

            <dd class="col-sm-10">
                @if( body != null)
                {
                    @((MarkupString)body)
                }
                else
                {
                    @article.Content
                }

            </dd>

            <dt class="col-sm-2">CreateDate</dt>
            <dd class="col-sm-10">@article.CreateDate</dd>

            <dt class="col-sm-2">UpdateDate</dt>
            <dd class="col-sm-10">@article.UpdateDate</dd>
        </dl>
        <AuthorizeView>
            <Authorized>
            <div>
                <a href="@($"/articles")">Back to Yout List</a>
            </div>
        </Authorized>
        </AuthorizeView>
        <div>
            <a href="@($"/")">Back to ALL Article</a>
        </div>

    }
</div>

@code {
    Article? article;
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private string body;
    private string test = "<p>Console.WriteLine(\"test\");</p>";


    public HttpContextAccessor HttpContextAccessor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        article = await DB.Articles.FirstOrDefaultAsync(m => m.Id == Id);

        if (article is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await JSRuntime.InvokeVoidAsync("initPrism");
    // }

    // protected override async Task OnParametersSetAsync()
    // {
    //     body = await JSRuntime.InvokeAsync<string>("marked.parse", article.Content);
    // }


}
