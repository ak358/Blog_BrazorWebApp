@page "/articles/edit"
@inject Blog_BrazorWebApp.Data.ApplicationDbContext DB
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Article</h4>
<hr />
@if (BeforeArticle is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <EditForm method="post" Model="BeforeArticle" OnValidSubmit="UpdateArticle" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Article.Id" value="@BeforeArticle.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="BeforeArticle.Title" class="form-control" />
                    <ValidationMessage For="() => BeforeArticle.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="content" class="form-label">Content:</label>
                    <InputTextArea id="content" @bind-Value="BeforeArticle.Content" class="form-control" />
                    <ValidationMessage For="() => BeforeArticle.Content" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/articles">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public Article? BeforeArticle { get; set; }

    [SupplyParameterFromForm]
    public Article? Article { get; set; }

    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    private string userName;
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        BeforeArticle = await DB.Articles.FirstOrDefaultAsync(m => m.Id == Id);

        if (BeforeArticle is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateArticle()
    {
        // マークダウンをHTMLに変換する
        string html = Markdown.ToHtml(BeforeArticle.Content);
        BeforeArticle.Content = html;

        userName = HttpContext.User.Identity.Name;
        userId = DB.UserAccounts.Where(user => user.UserName == userName).FirstOrDefault().Id;
        BeforeArticle.UserId = userId;

        BeforeArticle.CreateDate = BeforeArticle.CreateDate; // 更新前のCreateDateを保持
        BeforeArticle.UpdateDate = DateTime.Now;

        DB.Attach(BeforeArticle!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ArticleExists(BeforeArticle!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/articles");
    }

    bool ArticleExists(int id)
    {
        return DB.Articles.Any(e => e.Id == id);
    }
}
