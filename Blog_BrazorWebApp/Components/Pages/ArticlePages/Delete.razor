@page "/articles/delete"
@inject Blog_BrazorWebApp.Data.ApplicationDbContext DB
@using Blog_BrazorWebApp.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Article</h4>
    <hr />
    @if (article is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@article.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Content</dt>
            <dd class="col-sm-10">@article.Content</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreateDate</dt>
            <dd class="col-sm-10">@article.CreateDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdateDate</dt>
            <dd class="col-sm-10">@article.UpdateDate</dd>
        </dl>
        <EditForm method="post" Model="article" OnValidSubmit="DeleteArticle" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(article is null)">Delete</button> |
            <a href="/">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Article? article;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        article = await DB.Articles.FirstOrDefaultAsync(m => m.Id == Id);

        if (article is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteArticle()
    {
        DB.Articles.Remove(article!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/articles");
    }
}
