@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.QuickGrid
@inject Blog_BrazorWebApp.Data.ApplicationDbContext DB
@using Blog_BrazorWebApp.Model

<PageTitle>blog</PageTitle>

<h1>記事一覧</h1>

<QuickGrid Class="table" Items="articleViewModels" Pagination="@pagination">

    <p class="mejirushi">
        <PropertyColumn title="title" Property="articleVM => articleVM.Title" />
    </p>
    <PropertyColumn Property="articleVM => articleVM.ContentHeader" />
    <PropertyColumn Property="articleVM => articleVM.Data" Sortable="true" />

    <TemplateColumn Context="articleViewModel">
        <a href="@($"articles/edit?id={articleViewModel.Id}")">Edit</a> |
        <a href="@($"articles/details?id={articleViewModel.Id}")">Details</a> |
        <a href="@($"articles/delete?id={articleViewModel.Id}")">Delete</a>
    </TemplateColumn>

</QuickGrid>

<div class="page-buttons">
    Page:
    @if (pagination.TotalItemCount.HasValue)
    {
        for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
        {
            var capturedIndex = pageIndex;
            <button @onclick="@(() => GoToPageAsync(capturedIndex))"
                    class="@PageButtonClass(capturedIndex)"
                    aria-current="@AriaCurrentValue(capturedIndex)"
                    aria-label="Go to page @(pageIndex + 1)">
                @(pageIndex + 1)
            </button>
        }
    }
</div>


@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<ArticleViewModel>? articleViewModels;

    protected override void OnInitialized()
    {
        articleViewModels = DB.Articles
    .Select(item => new ArticleViewModel
        {
            Id = item.Id,
            Title = item.Title,
            ContentHeader = item.Content.Length > 10 ? item.Content.Substring(0, 10) + "..." : item.Content,
            Data = item.UpdateDate == item.CreateDate ? item.CreateDate : item.UpdateDate
        });

        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

}